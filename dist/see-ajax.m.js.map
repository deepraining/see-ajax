{"version":3,"file":"see-ajax.m.js","sources":["../src/share.js","../src/setting.js","../src/util/logger.js","../src/post_handle.js","../src/send.js","../src/index.js","../src/config.js","../src/set_env.js","../src/get_env.js","../src/set.js"],"sourcesContent":["export default {\n  // Application options.\n  optionsCollection: {},\n  // Environment, default is 0.\n  env: 0,\n};\n","export default {\n  // Whether current mode is debug.\n  debug: !0,\n};\n","const prefix = 'see-ajax: ';\n\nexport const log = (str, ...rest) => {\n  console.log(prefix + str, ...rest);\n};\n\nexport const info = (str, ...rest) => {\n  console.info(prefix + str, ...rest);\n};\n\nexport const warn = (str, ...rest) => {\n  console.warn(prefix + str, ...rest);\n};\n\nexport const error = (str, ...rest) => {\n  console.error(prefix + str, ...rest);\n};\n\nexport const throwError = str => {\n  throw new Error(prefix + str);\n};\n","import JSONRefactor from 'json-refactor';\n\nimport share from './share';\n\n/**\n * Post handling after getting response data.\n *\n * @param res Response data.\n * @param params Request params.\n * @param name Request name.\n */\nexport default function(res, params, name) {\n  // Current options.\n  const options = share.optionsCollection[name];\n  // Common options.\n  const commonOptions = share.optionsCollection.common || {};\n\n  // Index to select item.\n  const index = share.env;\n\n  // Response refactor.\n  const responseRefactor = options.responseRefactor && options.responseRefactor[index];\n  const commonResponseRefactor = commonOptions.responseRefactor && commonOptions.responseRefactor[index];\n\n  // Post handle.\n  const postHandle = options.postHandle && options.postHandle[index];\n  const commonPostHandle = commonOptions.postHandle && commonOptions.postHandle[index];\n\n  let response = res;\n\n  if (commonResponseRefactor) JSONRefactor(response, commonResponseRefactor);\n  if (responseRefactor) JSONRefactor(response, responseRefactor);\n  if (commonPostHandle) {\n    const result = commonPostHandle(response, params, name);\n\n    // If return a new object, use it.\n    if (result) response = result;\n  }\n  if (postHandle) {\n    const result = postHandle(response, params, name);\n\n    // If return a new object, use it.\n    if (result) response = result;\n  }\n\n  return response;\n}\n","import request from 'reqwest';\nimport setting from './setting';\nimport share from './share';\nimport { info, error } from './util/logger';\nimport postHandle from './post_handle';\n\n/**\n * Make a request.\n *\n * @param name Defined request name.\n * @param params Request params.\n * @param successCallback Success callback.\n * @param errorCallback Error callback.\n */\nexport default function(name, params, successCallback, errorCallback) {\n  if (!name) return;\n\n  // Current options.\n  const options = share.optionsCollection[name];\n  // Common options.\n  const commonOptions = share.optionsCollection.common || {};\n\n  if (!options) {\n    error(`name '${name}' is not configured.`);\n    return;\n  }\n\n  // Index to select item.\n  const index = share.env;\n\n  // Http method, default is `GET`.\n  const method = (options.method && options.method[index]) || 'get';\n\n  // Stringify request params.\n  const stringify = (options.stringify && options.stringify[index]) || !1;\n\n  // Ajax options.\n  const settings = (options.settings && options.settings[index]) || {};\n\n  // url\n  const url = (options.url && options.url[index]) || '';\n\n  // Request keys.\n  const requestKeys = (options.requestKeys && options.requestKeys[index]) || {};\n\n  // Pre handle.\n  const preHandle = options.preHandle && options.preHandle[index];\n\n  const commonPreHandle = commonOptions.preHandle && commonOptions.preHandle[index];\n\n  // implement\n  const implement = options.implement && options.implement[index];\n\n  // Real request params.\n  let realParams = Object.assign({}, params || {});\n\n  // Request keys mapping handling.\n  Object.keys(realParams).forEach(key => {\n    const newKey = requestKeys[key];\n    if (newKey && typeof newKey === 'string') {\n      // Make a new key.\n      realParams[newKey] = realParams[key];\n      // Delete old key.\n      delete realParams[key];\n    }\n  });\n\n  // Pre handling.\n  if (commonPreHandle) {\n    const result = commonPreHandle(realParams);\n\n    // If return a new object, use it.\n    if (result) realParams = result;\n  }\n  if (preHandle) {\n    const result = preHandle(realParams);\n\n    // If return a new object, use it.\n    if (result) realParams = result;\n  }\n\n  // Custom implement.\n  if (implement) {\n    implement(result => {\n      if (setting.debug) {\n        info(`custom ajax implement for '${name}', and request params is:`, realParams);\n        info(`result for '${name}' is:`, result);\n      }\n\n      successCallback(postHandle(result, realParams, name));\n    }, realParams);\n  } else {\n    settings.url = url;\n    settings.method = method;\n    settings.data = stringify ? JSON.stringify(realParams) : realParams;\n    settings.type = 'json';\n\n    if (method !== 'get' && method !== 'GET' && method !== 'head' && method !== 'HEAD') {\n      if (!settings.headers) settings.headers = {};\n\n      if (!settings.headers['Content-Type'])\n        settings.headers['Content-Type'] = stringify\n          ? 'application/json'\n          : 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n\n    settings.success = result => {\n      if (successCallback) successCallback(postHandle(result, realParams, name));\n    };\n    settings.error = err => {\n      if (errorCallback) errorCallback(err);\n    };\n\n    request(settings);\n  }\n}\n","import config from './config';\nimport setEnv from './set_env';\nimport getEnv from './get_env';\nimport send from './send';\nimport set from './set';\n\nsend.config = config;\nsend.setEnv = setEnv;\nsend.getEnv = getEnv;\nsend.set = set;\n\nexport default send;\n","import share from './share';\n\n/**\n * Configure application.\n *\n * @param name\n * @param options\n */\nexport default function(name, options) {\n  // One\n  if (typeof name === 'string') {\n    share.optionsCollection[name] = options;\n  }\n  // Multiple\n  else {\n    Object.keys(name).forEach(key => {\n      share.optionsCollection[key] = name[key];\n    });\n  }\n}\n","import share from './share';\n\n/**\n * Set current environment.\n */\nexport default function(env) {\n  share.env = env;\n}\n","import share from './share';\n\n/**\n * Get current environment.\n */\nexport default () => share.env;\n","import setting from './setting';\n\nexport default function(params) {\n  if (!params) return;\n\n  Object.keys(params).forEach(key => {\n    setting[key] = params[key];\n  });\n}\n"],"names":["optionsCollection","env","debug","info","str","console","rest","error","res","params","name","const","options","share","commonOptions","common","index","responseRefactor","commonResponseRefactor","postHandle","commonPostHandle","response","JSONRefactor","result","successCallback","errorCallback","method","stringify","settings","url","requestKeys","preHandle","commonPreHandle","implement","realParams","Object","assign","keys","forEach","key","newKey","setting","data","JSON","type","headers","success","err","request","send","config","setEnv","getEnv","set"],"mappings":"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"}